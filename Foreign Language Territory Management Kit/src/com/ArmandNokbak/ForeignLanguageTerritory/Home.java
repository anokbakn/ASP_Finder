/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ArmandNokbak.ForeignLanguageTerritory;

import foreign.language.territory.management.kit.ForeignLanguageTerritoryManagementKit;
import static foreign.language.territory.management.kit.ForeignLanguageTerritoryManagementKit.dataList;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.List;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTable.PrintMode;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.TableView.TableRow;

/**
 *
 * @author anokbakn
 */
public class Home extends javax.swing.JFrame {

    public static LinkedList lastNamesList = new LinkedList();
    public static LinkedList zipCodesList = new LinkedList();
    private BufferedReader br;
    public static Search search;
    public static SearchZip4 searchZip4;
    public DefaultTableModel displayTableModel;
    public ArrayList<Object[]> removed;
    public DefaultTableModel model;
    private DefaultTableModel territoryModel;
    private int selectedRow;
    private int selectedColumn;
    private Object selectedValue;
    private Object selectedZip4;
    private Object selectedTel;
    private Object enteredValue;
    private String ipAddress;
    private boolean emailValid;
    private String userEmail;
    public static boolean choseList = false;

    /**
     * Creates new form LogIn
     */
    public Home() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableMenu = new javax.swing.JPopupMenu();
        sendToTelMenu = new javax.swing.JMenuItem();
        sendToLetterTerMenu = new javax.swing.JMenuItem();
        sendToMasterTerMenu = new javax.swing.JMenuItem();
        sendToDoNotCallMenu = new javax.swing.JMenuItem();
        deleteHouseholdMenu = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        addressSearchTab = new javax.swing.JPanel();
        loadZipListBtn = new javax.swing.JButton();
        zipCodesLoadedLbl = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cityField = new javax.swing.JTextField();
        loadNamesBtn = new javax.swing.JButton();
        lastNamesLoadedLbl = new javax.swing.JLabel();
        statesComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTextPane = new javax.swing.JTextPane();
        searchBtn = new javax.swing.JButton();
        foundLbl = new javax.swing.JLabel();
        lastNameLbl = new javax.swing.JLabel();
        lastNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        zipField = new javax.swing.JTextField();
        territoryGeneratorPanel = new javax.swing.JPanel();
        zipToPrintLabel = new javax.swing.JLabel();
        zipToPrintField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        territoryTypeComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        campaignsComboBox = new javax.swing.JComboBox();
        printButton = new javax.swing.JButton();
        displayingZipLbl = new javax.swing.JLabel();
        modifyTerTab = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        nameLbl = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        addressLbl = new javax.swing.JLabel();
        addressField = new javax.swing.JTextField();
        telLbl = new javax.swing.JLabel();
        telephoneField = new javax.swing.JTextField();
        cityLbl = new javax.swing.JLabel();
        newCityField = new javax.swing.JTextField();
        langLbl = new javax.swing.JLabel();
        languageCombo = new javax.swing.JComboBox();
        interestedLbl = new javax.swing.JLabel();
        interestedCombo = new javax.swing.JComboBox();
        territoryTypeCombo = new javax.swing.JComboBox();
        territoryTypeLbl = new javax.swing.JLabel();
        addHouseholdBtn = new javax.swing.JButton();
        loadFileBtn = new javax.swing.JButton();
        stateField = new javax.swing.JTextField();
        stateLbl = new javax.swing.JLabel();
        clearBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        territoryTable = new javax.swing.JTable();
        displayedTerLbl = new javax.swing.JLabel();
        territoryTypePanel = new javax.swing.JPanel();
        displayTerritoryCombo = new javax.swing.JComboBox();
        searchField = new javax.swing.JTextField();
        searchLbl = new javax.swing.JLabel();
        statisticsTab = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        statiticsEditorPane = new javax.swing.JEditorPane();
        statisticsCombo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        backUpMenu = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        emailUsMenu = new javax.swing.JMenuItem();

        addPopup(territoryTable, tableMenu);
        tableMenu.setVisible(true);
        tableMenu.setFont(foundLbl.getFont());

        sendToTelMenu.setText("Send to Telephone Territory");
        sendToTelMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToTelMenuActionPerformed(evt);
            }
        });
        tableMenu.add(sendToTelMenu);

        sendToLetterTerMenu.setText("Send to Letter Writing Territory");
        sendToLetterTerMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToLetterTerMenuActionPerformed(evt);
            }
        });
        tableMenu.add(sendToLetterTerMenu);

        sendToMasterTerMenu.setText("Send to Master Territory");
        sendToMasterTerMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToMasterTerMenuActionPerformed(evt);
            }
        });
        tableMenu.add(sendToMasterTerMenu);

        sendToDoNotCallMenu.setText("Send to Do Not Call List");
        sendToDoNotCallMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToDoNotCallMenuActionPerformed(evt);
            }
        });
        tableMenu.add(sendToDoNotCallMenu);

        deleteHouseholdMenu.setText("Delete Household");
        deleteHouseholdMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHouseholdMenuActionPerformed(evt);
            }
        });
        tableMenu.add(deleteHouseholdMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ASP Finder (All Sorts of People Finder) version 11    \"Whose will is that all sorts of people should be saved and come to an accurate knowledge of truth.\" 1 Timothy 2:4.");
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(new ImageIcon(getClass().getResource("SearchIcon.png")).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.setFont(lastNameLbl.getFont());

        addressSearchTab.setBackground(new java.awt.Color(255, 255, 255));
        addressSearchTab.setName(""); // NOI18N

        loadZipListBtn.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        loadZipListBtn.setText("Load Zip codes list from file");
        loadZipListBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadZipListBtnActionPerformed(evt);
            }
        });

        zipCodesLoadedLbl.setFont(loadZipListBtn.getFont());
        zipCodesLoadedLbl.setForeground(new java.awt.Color(255, 0, 0));

        jLabel1.setFont(zipCodesLoadedLbl.getFont());
        jLabel1.setText("City : ");

        loadNamesBtn.setFont(loadZipListBtn.getFont());
        loadNamesBtn.setText("Load last names list from file");
        loadNamesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadNamesBtnActionPerformed(evt);
            }
        });

        lastNamesLoadedLbl.setFont(loadZipListBtn.getFont());
        lastNamesLoadedLbl.setForeground(new java.awt.Color(255, 0, 0));

        statesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "DC", "WV", "WI", "WY" }));
        statesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statesComboBoxActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 2, true));

        resultsTextPane.setEditable(false);
        resultsTextPane.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 51), 1, true));
        resultsTextPane.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resultsTextPane.setMargin(new java.awt.Insets(3, 10, 3, 3));
        resultsTextPane.setMinimumSize(new java.awt.Dimension(300, 20));
        resultsTextPane.setPreferredSize(getMinimumSize());
        jScrollPane1.setViewportView(resultsTextPane);

        searchBtn.setFont(zipCodesLoadedLbl.getFont());
        searchBtn.setText("Start Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        foundLbl.setFont(zipCodesLoadedLbl.getFont());
        foundLbl.setForeground(new java.awt.Color(0, 0, 204));
        foundLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lastNameLbl.setFont(foundLbl.getFont());
        lastNameLbl.setText("Last Name : ");

        lastNameField.setFont(foundLbl.getFont());

        jLabel2.setFont(foundLbl.getFont());
        jLabel2.setText("Zip Code : ");

        zipField.setFont(foundLbl.getFont());

        javax.swing.GroupLayout addressSearchTabLayout = new javax.swing.GroupLayout(addressSearchTab);
        addressSearchTab.setLayout(addressSearchTabLayout);
        addressSearchTabLayout.setHorizontalGroup(
            addressSearchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addressSearchTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addressSearchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addressSearchTabLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(cityField))
                    .addComponent(loadZipListBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addGroup(addressSearchTabLayout.createSequentialGroup()
                        .addComponent(foundLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(131, 131, 131))
                    .addGroup(addressSearchTabLayout.createSequentialGroup()
                        .addGroup(addressSearchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastNameLbl)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(addressSearchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(zipField)
                            .addComponent(statesComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                            .addComponent(lastNameField)))
                    .addComponent(loadNamesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(addressSearchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addressSearchTabLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(zipCodesLoadedLbl))
                    .addGroup(addressSearchTabLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lastNamesLoadedLbl)))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );
        addressSearchTabLayout.setVerticalGroup(
            addressSearchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addressSearchTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addressSearchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addressSearchTabLayout.createSequentialGroup()
                        .addGroup(addressSearchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loadZipListBtn)
                            .addComponent(zipCodesLoadedLbl))
                        .addGap(18, 18, 18)
                        .addGroup(addressSearchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addComponent(loadNamesBtn)
                        .addGap(18, 18, 18)
                        .addComponent(statesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(addressSearchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastNamesLoadedLbl)
                            .addGroup(addressSearchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lastNameLbl)
                                .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(addressSearchTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(zipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(searchBtn)
                        .addGap(147, 147, 147)
                        .addComponent(foundLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );

        jTabbedPane1.addTab("Names Search", addressSearchTab);

        territoryGeneratorPanel.setBackground(new java.awt.Color(255, 255, 255));
        territoryGeneratorPanel.setFont(searchBtn.getFont());

        zipToPrintLabel.setFont(foundLbl.getFont());
        zipToPrintLabel.setText("Zip code to print");

        zipToPrintField.setFont(foundLbl.getFont());

        displayTable.setFont(foundLbl.getFont());
        displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Language Speaker", "Name", "Address", "Phone", "Comments"
            }
        ));
        displayTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        displayTable.setIntercellSpacing(new java.awt.Dimension(2, 5));
        displayTable.setRowHeight(40);
        displayTable.setRowMargin(10);
        jScrollPane2.setViewportView(displayTable);

        jLabel3.setFont(foundLbl.getFont());
        jLabel3.setText("Type of Territory");

        territoryTypeComboBox.setFont(foundLbl.getFont());
        territoryTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "...", "Master Territory", "Telephone", "Letter writing", "Do not call" }));
        territoryTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                territoryTypeComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setFont(foundLbl.getFont());
        jLabel4.setText("Special Campaigns");

        campaignsComboBox.setFont(foundLbl.getFont());
        campaignsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "...", "Memorial", "Circuit Overseer", "Kingdom news", "Not interested", "Interested", "confirmed speaker" }));
        campaignsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campaignsComboBoxActionPerformed(evt);
            }
        });

        printButton.setFont(foundLbl.getFont());
        printButton.setText("Print Territory");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        displayingZipLbl.setFont(new java.awt.Font("Forte", 1, 24)); // NOI18N
        displayingZipLbl.setForeground(new java.awt.Color(0, 0, 102));
        displayingZipLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout territoryGeneratorPanelLayout = new javax.swing.GroupLayout(territoryGeneratorPanel);
        territoryGeneratorPanel.setLayout(territoryGeneratorPanelLayout);
        territoryGeneratorPanelLayout.setHorizontalGroup(
            territoryGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(territoryGeneratorPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(territoryGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(zipToPrintLabel)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(20, 20, 20)
                .addGroup(territoryGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(campaignsComboBox, 0, 187, Short.MAX_VALUE)
                    .addComponent(territoryTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(zipToPrintField)
                    .addComponent(printButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20)
                .addGroup(territoryGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayingZipLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        territoryGeneratorPanelLayout.setVerticalGroup(
            territoryGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(territoryGeneratorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(territoryGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(territoryGeneratorPanelLayout.createSequentialGroup()
                        .addGroup(territoryGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(zipToPrintLabel)
                            .addComponent(zipToPrintField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(territoryGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(territoryTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(territoryGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(campaignsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60)
                        .addComponent(printButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(displayingZipLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(181, 181, 181))
        );

        jTabbedPane1.addTab("Territories Generator Tool", territoryGeneratorPanel);

        modifyTerTab.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add New Household", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, foundLbl.getFont(), new java.awt.Color(51, 51, 255)));

        nameLbl.setFont(foundLbl.getFont());
        nameLbl.setText("Name : ");

        nameField.setFont(foundLbl.getFont());
        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        addressLbl.setFont(foundLbl.getFont());
        addressLbl.setText("Address : ");

        addressField.setFont(foundLbl.getFont());

        telLbl.setFont(foundLbl.getFont());
        telLbl.setText("Telephone : ");

        cityLbl.setFont(foundLbl.getFont());
        cityLbl.setText("City : ");

        langLbl.setFont(foundLbl.getFont());
        langLbl.setText("Language Speaker : ");

        languageCombo.setFont(foundLbl.getFont());
        languageCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "False", "True" }));

        interestedLbl.setFont(foundLbl.getFont());
        interestedLbl.setText("Interested : ");

        interestedCombo.setFont(foundLbl.getFont());
        interestedCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "False", "True" }));

        territoryTypeCombo.setFont(foundLbl.getFont());
        territoryTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Master Territory", "Letter Writing", "Telephone", "Do Not Call List" }));

        territoryTypeLbl.setFont(foundLbl.getFont());
        territoryTypeLbl.setText("Territory Type : ");

        addHouseholdBtn.setFont(foundLbl.getFont());
        addHouseholdBtn.setText("Add Household");
        addHouseholdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHouseholdBtnActionPerformed(evt);
            }
        });

        loadFileBtn.setFont(foundLbl.getFont());
        loadFileBtn.setText("Load Address from File");
        loadFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileBtnActionPerformed(evt);
            }
        });

        stateField.setFont(foundLbl.getFont());

        stateLbl.setFont(foundLbl.getFont());
        stateLbl.setText("State : ");

        clearBtn.setFont(foundLbl.getFont());
        clearBtn.setText("Clear Fields");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(langLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(languageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(interestedLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(interestedCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addressLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(telLbl)
                            .addComponent(cityLbl)
                            .addComponent(stateLbl))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stateField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(newCityField)
                            .addComponent(telephoneField)
                            .addComponent(addressField)
                            .addComponent(nameField)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(territoryTypeLbl)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(loadFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(clearBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(territoryTypeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addHouseholdBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telephoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityLbl)
                    .addComponent(newCityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stateLbl))
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(langLbl)
                    .addComponent(languageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interestedLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(interestedCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(territoryTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(territoryTypeLbl))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHouseholdBtn)
                    .addComponent(loadFileBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clearBtn)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        territoryTable.setFont(lastNameLbl.getFont());
        territoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Language Speaker", "Name", "Address", "Telephone", "Comments", "City", "Zip Code + 4", "Interested"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        territoryTable.setColumnSelectionAllowed(false);
        territoryTable.setName(""); // NOI18N
        territoryTable.setRowHeight(25);
        territoryTable.setRowMargin(5);
        territoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                territoryTableMouseClicked(evt);
            }
        });
        territoryTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                territoryTablePropertyChange(evt);
            }
        });
        territoryTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                territoryTableKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(territoryTable);
        sorter = new TableRowSorter<DefaultTableModel>((DefaultTableModel)territoryTable.getModel());
        territoryTable.setRowSorter(sorter);

        displayedTerLbl.setFont(new java.awt.Font("Vijaya", 1, 30)); // NOI18N
        displayedTerLbl.setForeground(new java.awt.Color(51, 51, 255));
        displayedTerLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        displayedTerLbl.setText("No Territory Displayed at the moment.");

        territoryTypePanel.setBackground(new java.awt.Color(255, 255, 255));
        territoryTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Territory Type", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, foundLbl.getFont(), new java.awt.Color(51, 0, 204)));

        displayTerritoryCombo.setFont(foundLbl.getFont());
        displayTerritoryCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--- Choose territory to display ---", "Master Territory", "Letter Writing", "Telephone", "Do Not Call List" }));
        displayTerritoryCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayTerritoryComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout territoryTypePanelLayout = new javax.swing.GroupLayout(territoryTypePanel);
        territoryTypePanel.setLayout(territoryTypePanelLayout);
        territoryTypePanelLayout.setHorizontalGroup(
            territoryTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(territoryTypePanelLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(displayTerritoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );
        territoryTypePanelLayout.setVerticalGroup(
            territoryTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(territoryTypePanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(displayTerritoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        searchField.setBackground(new java.awt.Color(204, 204, 204));
        searchField.setFont(foundLbl.getFont());
        searchField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        searchLbl.setFont(foundLbl.getFont());
        searchLbl.setText("Search Table : ");

        javax.swing.GroupLayout modifyTerTabLayout = new javax.swing.GroupLayout(modifyTerTab);
        modifyTerTab.setLayout(modifyTerTabLayout);
        modifyTerTabLayout.setHorizontalGroup(
            modifyTerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyTerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modifyTerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(modifyTerTabLayout.createSequentialGroup()
                        .addComponent(searchLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchField))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(territoryTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20)
                .addGroup(modifyTerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayedTerLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        modifyTerTabLayout.setVerticalGroup(
            modifyTerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyTerTabLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(modifyTerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(modifyTerTabLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(territoryTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modifyTerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displayedTerLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchLbl))
                .addContainerGap())
        );

        displayedTerLbl.getAccessibleContext().setAccessibleName("");

        jTabbedPane1.addTab("View & Modify Territory", modifyTerTab);

        statisticsTab.setBackground(new java.awt.Color(255, 255, 255));
        statisticsTab.setFont(foundLbl.getFont());

        statiticsEditorPane.setEditable(false);
        statiticsEditorPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Statistics Board", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 2, 14), new java.awt.Color(0, 51, 51))); // NOI18N
        statiticsEditorPane.setFont(foundLbl.getFont());
        jScrollPane4.setViewportView(statiticsEditorPane);

        statisticsCombo.setFont(foundLbl.getFont());
        statisticsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Choose Action --", "Display Statistics", "Print Statistics" }));
        statisticsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statisticsComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout statisticsTabLayout = new javax.swing.GroupLayout(statisticsTab);
        statisticsTab.setLayout(statisticsTabLayout);
        statisticsTabLayout.setHorizontalGroup(
            statisticsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statisticsTabLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(statisticsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        statisticsTabLayout.setVerticalGroup(
            statisticsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticsTabLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(statisticsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statisticsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Statistics", statisticsTab);

        jLabel5.setFont(foundLbl.getFont());
        jLabel5.setText("Welcome "+ForeignLanguageTerritoryManagementKit.user.getUserName()+".");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel5)
                .addGap(5, 5, 5)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("Options");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        exitMenuItem.setFont(foundLbl.getFont());
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit Application");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        backUpMenu.setFont(foundLbl.getFont());
        backUpMenu.setText("Backup Data");
        backUpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backUpMenuActionPerformed(evt);
            }
        });
        fileMenu.add(backUpMenu);

        jMenuItem1.setFont(foundLbl.getFont());
        jMenuItem1.setText("Make a Contribution");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        emailUsMenu.setText("Email us");
        emailUsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailUsMenuActionPerformed(evt);
            }
        });
        helpMenu.add(emailUsMenu);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void statesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statesComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statesComboBoxActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        
        if (choseList == true) {
            // The user wants to search a list of last names in a list zip codes
        } else {// The user wants to search a single name in a single zip code
            lastNamesList.clear();
            lastNamesList.add(lastNameField.getText());
            
            zipCodesList.clear();
            zipCodesList.add(zipField.getText());
        }

       

        resultsTextPane.setText("");
        lastNamesLoadedLbl.setText("");

        search = new Search();
        search.start();


    }//GEN-LAST:event_searchBtnActionPerformed

    private void loadNamesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadNamesBtnActionPerformed
        lastNamesList.clear();
        //resultsTextPane.setText("");
        final JFileChooser fileDialog = new JFileChooser();

        int returnVal = fileDialog.showOpenDialog(fileDialog);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            java.io.File file = fileDialog.getSelectedFile();

            lastNamesLoadedLbl.setText("Loaded");

            try {
                br = new BufferedReader(new FileReader(file));
                String line;
                while ((line = br.readLine()) != null) {
                    lastNamesList.add(line);
                    resultsTextPane.setText(resultsTextPane.getText() + "\n" + line);
                }
                br.close();

                // singleLastNameControl = 1;
                // launch the search
                //searchBtn.doClick();
            } catch (FileNotFoundException e1) {
                JOptionPane.showMessageDialog(null, "File Not Found Exception");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "File IO Exception");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Open file command cancelled by user.");
        }


    }//GEN-LAST:event_loadNamesBtnActionPerformed

    private void loadZipListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadZipListBtnActionPerformed
        
        choseList = true;
        
        zipCodesList.clear();
        //resultsTextPane.setText("");
        final JFileChooser fileDialog = new JFileChooser();

        int returnVal = fileDialog.showOpenDialog(fileDialog);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            java.io.File file = fileDialog.getSelectedFile();

            zipCodesLoadedLbl.setText("Loaded");

            try {
                br = new BufferedReader(new FileReader(file));
                String line;
                while ((line = br.readLine()) != null) {
                    zipCodesList.add(line);
                    resultsTextPane.setText(resultsTextPane.getText() + "\n" + line);
                }
                br.close();

                // singleLastNameControl = 1;
                // launch the search
                //searchBtn.doClick();
            } catch (FileNotFoundException e1) {
                JOptionPane.showMessageDialog(null, "File Not Found Exception");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "File IO Exception");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Open file command cancelled by user.");
        }

    }//GEN-LAST:event_loadZipListBtnActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void territoryTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_territoryTypeComboBoxActionPerformed
        //LinkedList<HouseHold> dataList = ForeignLanguageTerritoryManagementKit.dataList;
        displayTableModel = (DefaultTableModel) displayTable.getModel();
        displayTableModel.setRowCount(0);// removes all rows of the table
        if (zipToPrintField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a Zip Code to print.");
        } else {
            String zipToPrint = zipToPrintField.getText();
            displayingZipLbl.setText("Displaying "+ zipToPrint);

            //if selects MasterTerritory
            if (territoryTypeComboBox.getSelectedIndex() == 1) {
                displayTableModel.setRowCount(0);// removes all rows of the table
                for (HouseHold house : dataList)//for all addresses
                {
                    if(house.getZip().length()>5){
                    if (house.getAddressType() == 0 && zipToPrint.equalsIgnoreCase(house.getZip().substring(0, 5)))// if the address is a master address && zip code is the
                    //the wanted zip code
                    {
                        displayTableModel.insertRow(displayTableModel.getRowCount(), new Object[]{house.getSpeakLang(),
                            house.getName(), house.getStreet(), house.getTel(), house.getComment()});
                    }
                    }

                }
            }
            //if selects TelephoneTerritory
            if (territoryTypeComboBox.getSelectedIndex() == 2) {
                campaignsComboBox.setSelectedIndex(0);
                displayTableModel.setRowCount(0);// removes all rows of the table
                for (HouseHold house : dataList)//for all addresses
                {
                    if(house.getZip().length()>5){
                    if (house.getAddressType() == 1 && zipToPrint.equalsIgnoreCase(house.getZip().substring(0, 5)))// if the address is a master address
                    {
                        displayTableModel.insertRow(displayTableModel.getRowCount(), new Object[]{house.getSpeakLang(),
                            house.getName(), house.getStreet(), house.getTel(), house.getComment()});
                    }
                    }
                }
            }
            //if selects LetterTerritory
            if (territoryTypeComboBox.getSelectedIndex() == 3) {
                campaignsComboBox.setSelectedIndex(0);
                displayTableModel.setRowCount(0);// removes all rows of the table
                for (HouseHold house : dataList)//for all addresses
                {
                    if(house.getZip().length()>5){
                    if (house.getAddressType() == 2 && zipToPrint.equalsIgnoreCase(house.getZip().substring(0, 5)))// if the address is a master address
                    {
                        displayTableModel.insertRow(displayTableModel.getRowCount(), new Object[]{house.getSpeakLang(),
                            house.getName(), house.getStreet(), house.getTel(), house.getComment()});
                    }
                    }
                }
            }
            //if selects Do not call
            if (territoryTypeComboBox.getSelectedIndex() == 4) {
                campaignsComboBox.setSelectedIndex(0);
                displayTableModel.setRowCount(0);// removes all rows of the table
                for (HouseHold house : dataList)//for all addresses
                {
                    if(house.getZip().length()>5){
                    if (house.getAddressType() == 3 && zipToPrint.equalsIgnoreCase(house.getZip().substring(0, 5)))// if the address is a master address
                    {
                        displayTableModel.insertRow(displayTableModel.getRowCount(), new Object[]{house.getSpeakLang(),
                            house.getName(), house.getStreet(), house.getTel(), house.getComment()});
                    }
                    }
                }
            }
        }
    }//GEN-LAST:event_territoryTypeComboBoxActionPerformed

    private void campaignsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campaignsComboBoxActionPerformed
        LinkedList<HouseHold> dataList = ForeignLanguageTerritoryManagementKit.dataList;
        displayTableModel = (DefaultTableModel) displayTable.getModel();
        displayTableModel.setRowCount(0);// removes all rows of the table
        if (zipToPrintField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a Zip Code to print.");
        } else {
            String zipToPrint = zipToPrintField.getText();

            //if selects MasterTerritory && Memorial campaign , then select confirmed language speakers
            if (territoryTypeComboBox.getSelectedIndex() == 1 && campaignsComboBox.getSelectedIndex() == 1) {
                displayTableModel.setRowCount(0);// removes all rows of the table
                for (HouseHold house : dataList)//for all addresses
                {
                    if (house.getAddressType() == 0 && zipToPrint.equalsIgnoreCase(house.getZip().substring(0, 5)) && house.getSpeakLang().equals(true))// if the address is a master address && zip code is the
                    //the wanted zip code
                    {
                        displayTableModel.insertRow(displayTableModel.getRowCount(), new Object[]{house.getSpeakLang(),
                            house.getName(), house.getStreet(), house.getTel(), house.getComment()});
                    }

                }
            } //if selects MasterTerritory && Circuit Overseer , then select confirmed language speakers
            else if (territoryTypeComboBox.getSelectedIndex() == 1 && campaignsComboBox.getSelectedIndex() == 2) {
                displayTableModel.setRowCount(0);// removes all rows of the table
                for (HouseHold house : dataList)//for all addresses
                {
                    if (house.getAddressType() == 0 && zipToPrint.equalsIgnoreCase(house.getZip().substring(0, 5)) && house.getSpeakLang().equals(true))// if the address is a master address && zip code is the
                    //the wanted zip code
                    {
                        displayTableModel.insertRow(displayTableModel.getRowCount(), new Object[]{house.getSpeakLang(),
                            house.getName(), house.getStreet(), house.getTel(), house.getComment()});
                    }

                }
            } //if selects MasterTerritory && Kingdom news , then select confirmed language speakers
            else if (territoryTypeComboBox.getSelectedIndex() == 1 && campaignsComboBox.getSelectedIndex() == 3) {
                displayTableModel.setRowCount(0);// removes all rows of the table
                for (HouseHold house : dataList)//for all addresses
                {
                    if (house.getAddressType() == 0 && zipToPrint.equalsIgnoreCase(house.getZip().substring(0, 5)) && house.getSpeakLang().equals(true))// if the address is a master address && zip code is the
                    //the wanted zip code
                    {
                        displayTableModel.insertRow(displayTableModel.getRowCount(), new Object[]{house.getSpeakLang(),
                            house.getName(), house.getStreet(), house.getTel(), house.getComment()});
                    }

                }
            } //if selects MasterTerritory && Not interested , then select confirmed language speakers
            else if (territoryTypeComboBox.getSelectedIndex() == 1 && campaignsComboBox.getSelectedIndex() == 4) {
                displayTableModel.setRowCount(0);// removes all rows of the table
                for (HouseHold house : dataList)//for all addresses
                {
                    if (house.getAddressType() == 0 && zipToPrint.equalsIgnoreCase(house.getZip().substring(0, 5)) && house.getInterested().equals(false) && house.getSpeakLang().equals(true))// if the address is a master address && zip code is the
                    //the wanted zip code && is not interested
                    {
                        displayTableModel.insertRow(displayTableModel.getRowCount(), new Object[]{house.getSpeakLang(),
                            house.getName(), house.getStreet(), house.getTel(), house.getComment()});
                    }

                }
            } //if selects MasterTerritory && interested , then select confirmed language speakers
            else if (territoryTypeComboBox.getSelectedIndex() == 1 && campaignsComboBox.getSelectedIndex() == 5) {
                displayTableModel.setRowCount(0);// removes all rows of the table
                for (HouseHold house : dataList)//for all addresses
                {
                    if (house.getAddressType() == 0 && zipToPrint.equalsIgnoreCase(house.getZip().substring(0, 5)) && house.getInterested().equals(true) && house.getSpeakLang().equals(true))// if the address is a master address && zip code is the
                    //the wanted zip code && is not interested
                    {
                        displayTableModel.insertRow(displayTableModel.getRowCount(), new Object[]{house.getSpeakLang(),
                            house.getName(), house.getStreet(), house.getTel(), house.getComment()});
                    }

                }
            } //if selects MasterTerritory && Language speakers , then select confirmed language speakers
            else if (territoryTypeComboBox.getSelectedIndex() == 1 && campaignsComboBox.getSelectedIndex() == 6) {
                displayTableModel.setRowCount(0);// removes all rows of the table
                for (HouseHold house : dataList)//for all addresses
                {
                    if (house.getAddressType() == 0 && zipToPrint.equalsIgnoreCase(house.getZip().substring(0, 5)) && house.getSpeakLang().equals(true))// if the address is a master address && zip code is the
                    //the wanted zip code
                    {
                        displayTableModel.insertRow(displayTableModel.getRowCount(), new Object[]{house.getSpeakLang(),
                            house.getName(), house.getStreet(), house.getTel(), house.getComment()});
                    }

                }
            }
        }
    }//GEN-LAST:event_campaignsComboBoxActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        model = (DefaultTableModel) displayTable.getModel();// Getting the model of the table we want to print
        int totalRows = model.getRowCount();

        MessageFormat header; //print header
        header = new MessageFormat(ForeignLanguageTerritoryManagementKit.user.getCongregation() + " Territory : ");

        MessageFormat footer; // print footer
        footer = new MessageFormat("Publisher:   ______________________   Zip Code: " + zipToPrintField.getText() + " "
                + campaignsComboBox.getSelectedItem() + " Page:__/__");

        System.out.println("Model # of rows:" + model.getRowCount());
        removed = new ArrayList<Object[]>();
        for (int i = 10; i < model.getRowCount(); i++) {
            Object[] row;
            row = new Object[]{model.getValueAt(i, 0), model.getValueAt(i, 1), model.getValueAt(i, 2), model.getValueAt(i, 3), model.getValueAt(i, 4)};

            removed.add(row);
        }
        System.out.println("rows removed : " + removed.size());
        model.setRowCount(10);

        System.out.println("table now has # of rows: " + model.getRowCount());
        //printing table now
        try {
            displayTable.print(PrintMode.FIT_WIDTH, header, footer, true, null, false);
        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        System.out.println("table now has # of rows after printing: " + model.getRowCount());

      //print test
        // printDisplayTable(removed.size());
        while (removed.size() > 0) {
            System.out.println("After original printing table has : " + model.getRowCount());
            if (removed.size() >= 10) {
                model.setRowCount(0);
                // System.out.println("table now has # of rows before printing round 2: "+ model.getRowCount());
                for (int i = 0; i < 10; i++) {
                    model.insertRow(model.getRowCount(), new Object[]{removed.get(i)[0],
                        removed.get(i)[1],
                        removed.get(i)[2],
                        removed.get(i)[3],
                        removed.get(i)[4]});

                    System.out.println("Adding rows table has : " + model.getRowCount());
                }

                System.out.println("table now has # of rows before printing round 2: " + model.getRowCount());
                for (int i = 0; i < 10; i++) {
                    removed.remove(0);//take off the ten first
                }
                System.out.println("removed size : " + removed.size());

                //printing table now
                try {
                    displayTable.print(PrintMode.FIT_WIDTH, header, footer, true, null, false);
                } catch (PrinterException e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            } else {
                model.setRowCount(0);
                for (int i = 0; i < removed.size(); i++) {
                    model.insertRow(model.getRowCount(), removed.get(i));
                }
                System.out.println("table now has # of rows after printing round 2: " + model.getRowCount());
                for (int i = 0; i < removed.size(); i++) {
                    removed.remove(0);//take off the ten first
                }
                System.out.println("removed size : " + removed.size());
                model.setRowCount(10);

                //printing table now
                try {
                    displayTable.print(PrintMode.FIT_WIDTH, header, footer, true, null, false);
                } catch (PrinterException e) {
                    JOptionPane.showMessageDialog(null, e);
                }

                break;
            }

        }

        /**
         * DefaultTableModel model1; Boolean check = false; model1 =
         * (DefaultTableModel) model;// duplicating the model of the table we
         * want to print do { System.out.println("Model1 # of rows:" +
         * model1.getRowCount()); // remove the first ten rows
         * model1.removeRow(0); model1.removeRow(1); model1.removeRow(2);
         * model1.removeRow(3); model1.removeRow(4); System.out.println("Model1
         * # of rows:" + model1.getRowCount()); model1.removeRow(5);
         * model1.removeRow(6); model1.removeRow(7); model1.removeRow(8);
         * model1.removeRow(9); System.out.println("Model1 # of rows:" +
         * model1.getRowCount());
         *
         * model.setRowCount(10); //display 10 rows of addresses to print
         * System.out.println("Model1 # of rows:" + model1.getRowCount());
         * //printing table now try { displayTable.print(PrintMode.FIT_WIDTH,
         * null, null, true, null, true); } catch (PrinterException e) {
         * JOptionPane.showMessageDialog(null, e); } System.out.println("Model1
         * # of rows:" + model1.getRowCount());
         *
         * System.out.println("Model1 # of rows:" + model1.getRowCount()); int
         * rowCount = model1.getRowCount(); check = false;
         *
         * if (rowCount > 0) { model = model1; check = true;
         *
         * }
         *
         *
         * }while(check);// while there are stuff in the table
      *
         */
    }//GEN-LAST:event_printButtonActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void displayTerritoryComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayTerritoryComboActionPerformed

        sorter.setRowFilter(RowFilter.regexFilter(""));// to disable the filter
        searchField.setText("");// Empty search field
        territoryModel = (DefaultTableModel) territoryTable.getModel();//
        territoryModel.setRowCount(0);
        //getting the data from the memory
        LinkedList<HouseHold> dataList = ForeignLanguageTerritoryManagementKit.dataList;

        if (displayTerritoryCombo.getSelectedIndex() == 0) {

            displayedTerLbl.setText("No Territory Displayed at this moment !");
        } else if (displayTerritoryCombo.getSelectedIndex() == 1)//to display master territory
        {

            for (HouseHold house : dataList)//for all addresses
            {
                if (house.getAddressType() == 0)// if the address is a master address 
                {
                    territoryModel.insertRow(territoryModel.getRowCount(), new Object[]{house.getSpeakLang(),
                        house.getName(), house.getStreet(), house.getTel(), house.getComment(), house.getCity(),
                        house.getZip(), house.getInterested()});
                }

            }
            displayedTerLbl.setText("Master Territory Displayed");
        } else if (displayTerritoryCombo.getSelectedIndex() == 3)//to display telephone territory
        {

            for (HouseHold house : dataList)//for all addresses
            {
                if (house.getAddressType() == 1)// if the address is a telephone address 
                {
                    territoryModel.insertRow(territoryModel.getRowCount(), new Object[]{house.getSpeakLang(),
                        house.getName(), house.getStreet(), house.getTel(), house.getComment(), house.getCity(),
                        house.getZip(), house.getInterested()});
                }

            }
            displayedTerLbl.setText("Telephone Territory Displayed");
        } else if (displayTerritoryCombo.getSelectedIndex() == 2)//to display letter territory
        {

            for (HouseHold house : dataList)//for all addresses
            {
                if (house.getAddressType() == 2)// if the address is a letter address 
                {
                    territoryModel.insertRow(territoryModel.getRowCount(), new Object[]{house.getSpeakLang(),
                        house.getName(), house.getStreet(), house.getTel(), house.getComment(), house.getCity(),
                        house.getZip(), house.getInterested()});
                }

            }
            displayedTerLbl.setText("Letter Writing Territory Displayed");
        } else if (displayTerritoryCombo.getSelectedIndex() == 4)//to display do not call territory
        {

            for (HouseHold house : dataList)//for all addresses
            {
                if (house.getAddressType() == 3)// if the address is a do not call address 
                {
                    territoryModel.insertRow(territoryModel.getRowCount(), new Object[]{house.getSpeakLang(),
                        house.getName(), house.getStreet(), house.getTel(), house.getComment(), house.getCity(),
                        house.getZip(), house.getInterested()});
                }

            }
            displayedTerLbl.setText("Do Not Call List Displayed");
        }

    }//GEN-LAST:event_displayTerritoryComboActionPerformed

    private void addHouseholdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHouseholdBtnActionPerformed
        if (!(nameField.getText().equals("")) && !(addressField.getText().equals(""))
                && !(newCityField.getText().equals("")) && !(stateField.getText().equals("")))//add
        {
            this.search = new Search();
            this.search.results = new LinkedList<HouseHold>();

            HouseHold house = new HouseHold();
            house.setName(nameField.getText());
            house.setStreet(addressField.getText());
            house.setCity(newCityField.getText());
            house.setState(stateField.getText());
            house.setTel(telephoneField.getText());
            if (languageCombo.getSelectedIndex() == 0)//doesn't speak language
            {
                house.setSpeakLang(false);
            } else if (languageCombo.getSelectedIndex() == 1)//does speak language
            {
                house.setSpeakLang(true);
            }

            if (interestedCombo.getSelectedIndex() == 0)// if the person is not interested
            {
                house.setInterested(false);
            } else if (interestedCombo.getSelectedIndex() == 1)// if the person is  interested
            {
                house.setInterested(true);
            }

            if (territoryTypeCombo.getSelectedIndex() == 0) {
                house.setAddressType(0);
            } else if (territoryTypeCombo.getSelectedIndex() == 1) {
                house.setAddressType(2);
            } else if (territoryTypeCombo.getSelectedIndex() == 2) {
                house.setAddressType(1);
            } else if (territoryTypeCombo.getSelectedIndex() == 3) {
                house.setAddressType(3);
            }

            this.search.results.add(house);
            SearchZip4 searchZip4 = new SearchZip4();
            searchZip4.start();

            ///////////////////////////KEEP GOING with territory type THEN ADD TO RESULTS AND START ZIP+4 SEARCH
        } else {
            JOptionPane.showMessageDialog(null, "Fill Name, address, city & state.");
        }
    }//GEN-LAST:event_addHouseholdBtnActionPerformed

    private void loadFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileBtnActionPerformed
        //Alert message for user
        String instructions = "Pay close attention here please!!!"
                + "\n 1) create a Microsoft Excel spreadsheet with the columns in this exact order:..."
                + "\nName"
                + "\nAddress	"
                + "\nSymbol	"
                + "\nComment	"
                + "\nZip Code	"
                + "\nCity	"
                + "\nTelephone 	"
                + "\nCountry	"
                + "\nState	"
                + "\nLanguage Speaker	"
                + "\nInterested	"
                + "\nTerritory Type"
                + "\n\n2) DO NOT LEAVE ANY CELL EMPTY! \nYou can fill empty cells with dots."
                + "\n3)Arrange your data according to the table cells."
                + "\n4) Where the person is a language speaker put 'YES' in the corresponding 'language speaker' cell."
                + " Otherwise put 'no'."
                + "\n5) Where the person is interested put 'yes' in the corresponding 'interested' cell."
                + " Otherwise, put 'no'."
                + "\n6) For master territory address put number '0' in the 'Territory Type' cell. 1 for Telephone addresses. 2 for letter"
                + "writing, and 3 for Do Not Call."
                + "\n7) Fill all cells of the 'state' column with the two-letter abbreviation of the state (i.e: PA for Pennsylvania)."
                + "\n8) Copy all the data from your excel spreadsheet excluding the column titles and paste it to a plain notepad file."
                + "\n9) When the file chooser dialog opens, browse to your notepad file and upload data."
                + ""
                + "\n\n\nIf you still need assistance, send email via 'help' menu option."
                + "\n\n\nThank you.";
        JOptionPane.showMessageDialog(null, instructions, "LOADING INSTRUCTIONS", JOptionPane.WARNING_MESSAGE);

        try {
            loadFromFile();
            JOptionPane.showMessageDialog(null,"Successfully loaded.\nGathering Zip+4s now.");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Data incorrectly formated! Check your Excel spreadsheet for mistakes.", "Data incorrectly formated!", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Now gathering zip+4 codes for loaded addresses
        SearchZip4 searchZip4 = new SearchZip4();
        searchZip4.start();

    }//GEN-LAST:event_loadFileBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        nameField.setText("");
        addressField.setText("");
        telephoneField.setText("");
        newCityField.setText("");
        stateField.setText("");
        languageCombo.setSelectedIndex(0);
        interestedCombo.setSelectedIndex(0);
        territoryTypeCombo.setSelectedIndex(0);
    }//GEN-LAST:event_clearBtnActionPerformed

    private void territoryTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_territoryTablePropertyChange

    }//GEN-LAST:event_territoryTablePropertyChange

    private void territoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_territoryTableMouseClicked

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        selectedRow = territoryTable.getSelectedRow(); //get selected row
        selectedColumn = territoryTable.getSelectedColumn();//get selected column
        selectedValue = territoryTable.getValueAt(selectedRow, selectedColumn);//get selected value
        selectedZip4 = territoryTable.getValueAt(selectedRow, 6); //gets the selected object's Zip+4
        selectedTel = territoryTable.getValueAt(selectedRow, 3); //gets the selected object's Telephone

        ////////////////////////////////////////////////////////////////////////////////////////////////
    }//GEN-LAST:event_territoryTableMouseClicked

    private void territoryTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_territoryTableKeyReleased
        LinkedList<HouseHold> dataList = ForeignLanguageTerritoryManagementKit.dataList;
        enteredValue = territoryTable.getValueAt(selectedRow, selectedColumn);//get entered value
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            for (HouseHold house : dataList) {
                if (house.getZip() == selectedZip4 && house.getTel() == selectedTel) {
                    if (selectedColumn == 0) {
                        house.setSpeakLang((Boolean) enteredValue);
                    } else if (selectedColumn == 1) {
                        house.setName((String) enteredValue);
                    } else if (selectedColumn == 2) {
                        house.setStreet((String) enteredValue);
                    } else if (selectedColumn == 3) {
                        house.setTel((String) enteredValue);
                    } else if (selectedColumn == 4) {
                        house.setComment((String) enteredValue);
                    } else if (selectedColumn == 5) {
                        house.setCity((String) enteredValue);
                    } else if (selectedColumn == 6) {
                        house.setZip((String) enteredValue);
                    } else if (selectedColumn == 7) {
                        house.setInterested((Boolean) enteredValue);
                    }
                    System.out.println("Object Modified");
                    break;
                }
            }
            //Saving changes
            try {
                ObjectOutputStream output1 = new ObjectOutputStream(new FileOutputStream("care.bin"));
                output1.writeObject(ForeignLanguageTerritoryManagementKit.dataList);
                output1.close();

            } catch (IOException ex1) {
                JOptionPane.showMessageDialog(null, "DATA SAVING UNSUCCESSFUL");
            }
        }
    }//GEN-LAST:event_territoryTableKeyReleased

    private void sendToTelMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToTelMenuActionPerformed
        // System.out.println(selectedZip4);
        for (HouseHold house : dataList)//within the database
        {
            if (house.getZip().equals(selectedZip4) && house.getTel().equals(selectedTel)) // find the concerned household
            {
                house.setAddressType(1);// Make this address a telephone territory address.
                break; //exit this loop
            }
        }
        //Modifying table model
        territoryModel.removeRow(selectedRow);//removing the item that was transferred.
        //Saving changes
        try {
            ObjectOutputStream output1 = new ObjectOutputStream(new FileOutputStream("care.bin"));
            output1.writeObject(ForeignLanguageTerritoryManagementKit.dataList);
            output1.close();

        } catch (IOException ex1) {
            JOptionPane.showMessageDialog(null, "DATA SAVING UNSUCCESSFUL");
        }

    }//GEN-LAST:event_sendToTelMenuActionPerformed

    private void sendToLetterTerMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToLetterTerMenuActionPerformed
        //System.out.println(selectedZip4);
        for (HouseHold house : dataList)//within the database
        {
            if (house.getZip().equals(selectedZip4) && house.getTel().equals(selectedTel)) // find the concerned household
            {
                house.setAddressType(2);// Make this address a letter territory address.
                break; //exit this loop
            }
        }
        //Modifying table model
        territoryModel.removeRow(selectedRow);//removing the item that was transferred.
        //Saving changes
        try {
            ObjectOutputStream output1 = new ObjectOutputStream(new FileOutputStream("care.bin"));
            output1.writeObject(ForeignLanguageTerritoryManagementKit.dataList);
            output1.close();

        } catch (IOException ex1) {
            JOptionPane.showMessageDialog(null, "DATA SAVING UNSUCCESSFUL");
        }
    }//GEN-LAST:event_sendToLetterTerMenuActionPerformed

    private void sendToMasterTerMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToMasterTerMenuActionPerformed
        //System.out.println(selectedZip4);
        for (HouseHold house : dataList)//within the database
        {
            if (house.getZip().equals(selectedZip4) && house.getTel().equals(selectedTel)) // find the concerned household
            {
                house.setAddressType(0);// Make this address a Master territory address.
                break; //exit this loop
            }
        }
        //Modifying table model
        territoryModel.removeRow(selectedRow);//removing the item that was transferred.
        //Saving changes
        try {
            ObjectOutputStream output1 = new ObjectOutputStream(new FileOutputStream("care.bin"));
            output1.writeObject(ForeignLanguageTerritoryManagementKit.dataList);
            output1.close();

        } catch (IOException ex1) {
            JOptionPane.showMessageDialog(null, "DATA SAVING UNSUCCESSFUL");
        }
    }//GEN-LAST:event_sendToMasterTerMenuActionPerformed

    private void sendToDoNotCallMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToDoNotCallMenuActionPerformed
        //System.out.println(selectedZip4);
        for (HouseHold house : dataList)//within the database
        {
            if (house.getZip().equals(selectedZip4) && house.getTel().equals(selectedTel)) // find the concerned household
            {
                house.setAddressType(3);// Make this address a Do Not Call territory address.
                break; //exit this loop
            }
        }
        //Modifying table model
        territoryModel.removeRow(selectedRow);//removing the item that was transferred.
        //Saving changes
        try {
            ObjectOutputStream output1 = new ObjectOutputStream(new FileOutputStream("care.bin"));
            output1.writeObject(ForeignLanguageTerritoryManagementKit.dataList);
            output1.close();

        } catch (IOException ex1) {
            JOptionPane.showMessageDialog(null, "DATA SAVING UNSUCCESSFUL");
        }
    }//GEN-LAST:event_sendToDoNotCallMenuActionPerformed

    private void deleteHouseholdMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHouseholdMenuActionPerformed
        // System.out.println(selectedZip4);
        for (HouseHold house : dataList)//within the database
        {
            if (house.getZip().equals(selectedZip4) && house.getTel().equals(selectedTel)) // find the concerned household
            {
                dataList.remove(house);
                break; //exit this loop
            }
        }
        //Modifying table model
        territoryModel.removeRow(selectedRow);//removing the item that was transferred.
        //Saving changes
        try {
            ObjectOutputStream output1 = new ObjectOutputStream(new FileOutputStream("care.bin"));
            output1.writeObject(ForeignLanguageTerritoryManagementKit.dataList);
            output1.close();

        } catch (IOException ex1) {
            JOptionPane.showMessageDialog(null, "DATA SAVING UNSUCCESSFUL");
        }
    }//GEN-LAST:event_deleteHouseholdMenuActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        String searchText = searchField.getText();

        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));

    }//GEN-LAST:event_searchFieldActionPerformed

    private void statisticsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticsComboActionPerformed
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        Date date = new Date();

        int masterCount = 0;
        int telCount = 0;
        int letterCount = 0;
        int doNotCallCount = 0;

        for (HouseHold house : dataList) {
            if (house.getAddressType() == 0) {
                masterCount++;
            } else if (house.getAddressType() == 1) {
                telCount++;
            } else if (house.getAddressType() == 2) {
                letterCount++;
            } else if (house.getAddressType() == 3) {
                doNotCallCount++;
            }

        }

        String text = ForeignLanguageTerritoryManagementKit.user.getCongregation() + " STATISTICS : \n\n"
                + "As of " + dateFormat.format(date)
                + "\n\nThere are " + masterCount + " people on the main list.\n"
                + "There are " + telCount + " people on the telephone list.\n"
                + "There are " + letterCount + " people on the letter writing list.\n"
                + "There are " + doNotCallCount + " people on the do not call list.\n"
                + "\n\n\n\nThank You."
                + "\n\n\n\n\n\n\n\nForeign Language Territory Management Kit.";

        if (statisticsCombo.getSelectedIndex() == 1) {
            statiticsEditorPane.setText(text);
        } else if (statisticsCombo.getSelectedIndex() == 2) {
            statiticsEditorPane.setText(text);
            MessageFormat header; //print header
            header = new MessageFormat("");

            MessageFormat footer; // print footer
            footer = new MessageFormat("");

            try {
                statiticsEditorPane.print(header, footer);
            } catch (PrinterException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (HeadlessException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_statisticsComboActionPerformed

    private void emailUsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailUsMenuActionPerformed
        /// Open Email Frame
         EmailFrame emailFrame = new EmailFrame();
        emailFrame.setVisible(true);
        
        
        
    }//GEN-LAST:event_emailUsMenuActionPerformed

    private void backUpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backUpMenuActionPerformed
        String backUpText = ""; // The backup content
        for(HouseHold house:dataList)
        {
            backUpText = backUpText + house.toString()+"\n";
        }
        
        
        
        String fileName = "backUp.txt";
                    try {
                        // Write User info to the "trash.bin" file
                        BufferedWriter out21 = new BufferedWriter(new FileWriter(fileName));
					    out21.write(backUpText);
					    out21.close();
                    }
                    catch (IOException ex1) {
                    JOptionPane.showMessageDialog(null, "Login output stream not created.\n Contact developer.");
                }
                      
        
        
        
        
        
        
        //get user email
            emailValid  = false;
            do{
            userEmail = JOptionPane.showInputDialog("Please enter a VALID email address!");
            try{
                InternetAddress emailAddress = new InternetAddress(userEmail);
                emailAddress.validate();
                emailValid  = true;
            }catch(AddressException e4)
            {
                emailValid = false;
            }
            }while(emailValid==false);
        
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.socketFactory.port", "465");
        props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
        props.put("mail.smtp.port", "465");

        Session session = Session.getDefaultInstance(props,
                new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication("youremail@gmail.com", "pwd");
                    }
                }
        );

        try {

            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(ForeignLanguageTerritoryManagementKit.user.getEmail(), ForeignLanguageTerritoryManagementKit.user.getUserName()
                    + " from " + ForeignLanguageTerritoryManagementKit.user.getCongregation()));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(userEmail));
            message.setSubject("ASP Finder Backup");
            BodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setText("Please,\nSee attached file for backup purposes."
                    + "\n\n"
                    + "Your Developer;\n"
                    + "All Sorts of People Finder.");
            Multipart multipart = new MimeMultipart();

            multipart.addBodyPart(messageBodyPart);

            messageBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(fileName);
            messageBodyPart.setDataHandler(new DataHandler(source));
            messageBodyPart.setFileName(fileName);
            multipart.addBodyPart(messageBodyPart);
            message.setContent(multipart);

            Transport.send(message);
            JOptionPane.showMessageDialog(null, "Backup Successful!");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Start Over when connected to the internet please!\n ");

        }
    }//GEN-LAST:event_backUpMenuActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(null, "Make a contribution via PayPal"+"\nPlease send the payment to this "
                + "email on PayPal:\n"
                + "youremail@gmail.com"
                + "\n\nThank you!", "Make a Contribution", JOptionPane.QUESTION_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogIn().setVisible(true);
            }
        });
    }

    public void printDisplayTable(int mirrorSize) {
        if (mirrorSize > 10) {
            System.out.println("removed size : " + mirrorSize);
            for (int i = 0; i < 10; i++) {
                model.insertRow(model.getRowCount(), removed.get(i));
            }
            printDisplayTable(--mirrorSize);
            return;
        } else {
            return;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addHouseholdBtn;
    private javax.swing.JTextField addressField;
    private javax.swing.JLabel addressLbl;
    private javax.swing.JPanel addressSearchTab;
    private javax.swing.JMenuItem backUpMenu;
    private javax.swing.JComboBox campaignsComboBox;
    public static javax.swing.JTextField cityField;
    private javax.swing.JLabel cityLbl;
    private javax.swing.JButton clearBtn;
    private javax.swing.JMenuItem deleteHouseholdMenu;
    private javax.swing.JTable displayTable;
    private javax.swing.JComboBox displayTerritoryCombo;
    private javax.swing.JLabel displayedTerLbl;
    private javax.swing.JLabel displayingZipLbl;
    private javax.swing.JMenuItem emailUsMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    public static javax.swing.JLabel foundLbl;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JComboBox interestedCombo;
    private javax.swing.JLabel interestedLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel langLbl;
    private javax.swing.JComboBox languageCombo;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JLabel lastNameLbl;
    private javax.swing.JLabel lastNamesLoadedLbl;
    private javax.swing.JButton loadFileBtn;
    private javax.swing.JButton loadNamesBtn;
    private javax.swing.JButton loadZipListBtn;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel modifyTerTab;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField newCityField;
    private javax.swing.JButton printButton;
    public static javax.swing.JTextPane resultsTextPane;
    private javax.swing.JButton searchBtn;
    public javax.swing.JTextField searchField;
    private javax.swing.JLabel searchLbl;
    private javax.swing.JMenuItem sendToDoNotCallMenu;
    private javax.swing.JMenuItem sendToLetterTerMenu;
    private javax.swing.JMenuItem sendToMasterTerMenu;
    private javax.swing.JMenuItem sendToTelMenu;
    private javax.swing.JTextField stateField;
    private javax.swing.JLabel stateLbl;
    public static javax.swing.JComboBox statesComboBox;
    private javax.swing.JComboBox statisticsCombo;
    private javax.swing.JPanel statisticsTab;
    private javax.swing.JEditorPane statiticsEditorPane;
    private javax.swing.JPopupMenu tableMenu;
    private javax.swing.JLabel telLbl;
    private javax.swing.JTextField telephoneField;
    private javax.swing.JPanel territoryGeneratorPanel;
    private javax.swing.JTable territoryTable;
    static TableRowSorter<DefaultTableModel> sorter;
    private javax.swing.JComboBox territoryTypeCombo;
    private javax.swing.JComboBox territoryTypeComboBox;
    private javax.swing.JLabel territoryTypeLbl;
    private javax.swing.JPanel territoryTypePanel;
    private javax.swing.JLabel zipCodesLoadedLbl;
    private javax.swing.JTextField zipField;
    private javax.swing.JTextField zipToPrintField;
    private javax.swing.JLabel zipToPrintLabel;
    // End of variables declaration//GEN-END:variables

    private static void addPopup(Component component, final JPopupMenu popup) {
        component.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            private void showMenu(MouseEvent e) {
                popup.show(e.getComponent(), e.getX(), e.getY());
            }
        });
    }

    private void loadFromFile() throws IOException  {
        
        this.search = new Search();
        this.search.results = new LinkedList<HouseHold>();

        JFileChooser chooser = new JFileChooser();
                //FileNameExtensionFilter filter = new FileNameExtensionFilter("txt");
        //chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            FileReader file = new FileReader(chooser.getSelectedFile());

            BufferedReader br = new BufferedReader(file);

            String line;
            while ((line = br.readLine()) != null) {

                StringTokenizer s = new StringTokenizer(line, "	");
                String name = null;
                String address = null;
                String symb = null;
                String comments = null;
                String zip = null;
                String city = null;
                String telephone = null;
                String country = null;
                String state = null;
                Boolean francophone = false;
                Boolean interested = false;
                int territoryType = 0;
                while (s.hasMoreTokens()) {

                    name = s.nextToken();
                    address = s.nextToken();
                    symb = s.nextToken();
                    comments = s.nextToken();
                    zip = s.nextToken();
                    //zipPlusFourList.add(zip);
                    city = s.nextToken();
                    telephone = s.nextToken();
                    country = s.nextToken();
                    state = s.nextToken();
                    String franc = s.nextToken();
                    if (franc.equalsIgnoreCase("false") || franc.equalsIgnoreCase("no")) {
                        francophone = false;
                    } else if (franc.equalsIgnoreCase("true") || franc.equalsIgnoreCase("yes")) {
                        francophone = true;
                    }
                    String interest = s.nextToken();
                    if (interest.equalsIgnoreCase("false") || interest.equalsIgnoreCase("no")) {
                        interested = false;
                    } else if (interest.equalsIgnoreCase("true") || interest.equalsIgnoreCase("yes")) {
                        interested = true;
                    }

                    territoryType = Integer.parseInt(s.nextToken());

                }

                HouseHold house = new HouseHold();
                house.setName(name);
                house.setStreet(address);
                house.setComment(comments);
                house.setZip(zip);
                house.setCity(city);
                house.setTel(telephone);
                house.setSpeakLang(francophone);
                house.setInterested(interested);
                house.setAddressType(territoryType);
                house.setState(state);

                this.search.results.add(house); //adding the new address to the search list for zip+4 retrieval

            }
            file.close();
            br.close();
        }

    }

}
